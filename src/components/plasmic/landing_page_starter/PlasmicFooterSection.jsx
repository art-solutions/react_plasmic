// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tzfnvjdGSoPvRBYt36kabC
// Component: PlLUFJ7CgQhz
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Logo from "../../Logo"; // plasmic-import: eBdyrJaTOP1g/component
import Button from "../../Button"; // plasmic-import: UcW2nQ3YUMuW/component
import { useScreenVariants as useScreenVariantsff52ShTm1YwH } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ff52shTm1ywH/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: tzfnvjdGSoPvRBYt36kabC/projectcss
import sty from "./PlasmicFooterSection.module.css"; // plasmic-import: PlLUFJ7CgQhz/css
import TwitterIcon from "./icons/PlasmicIcon__Twitter"; // plasmic-import: iawAq-kHnLiX/icon
import GithubIcon from "./icons/PlasmicIcon__Github"; // plasmic-import: 0ZWhZQ-r3cGV/icon
import LinkedinIcon from "./icons/PlasmicIcon__Linkedin"; // plasmic-import: W3bWlINHUWfV/icon

createPlasmicElementProxy;

export const PlasmicFooterSection__VariantProps = new Array();

export const PlasmicFooterSection__ArgProps = new Array();

const $$ = {};

function PlasmicFooterSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsff52ShTm1YwH()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___7PakI)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__lrcIg)}
        >
          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            _50Opaque={true}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jlC7A)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2Dvlr
              )}
            >
              {"Connect with us"}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jOSdy)}
            >
              <TwitterIcon
                className={classNames(projectcss.all, sty.svg__pEa4)}
                role={"img"}
              />

              <GithubIcon
                className={classNames(projectcss.all, sty.svg__va7By)}
                role={"img"}
              />

              <LinkedinIcon
                className={classNames(projectcss.all, sty.svg__fUm0E)}
                role={"img"}
              />
            </Stack__>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___64Pkg)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cZuaf
            )}
          >
            {"Product"}
          </div>
          <Button
            className={classNames("__wab_instance", sty.button__vWrnj)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__onoEp
              )}
            >
              {"Pricing"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__n0Ps8)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__l8Yk6
              )}
            >
              {"Log in"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__hemRa)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dC8D
              )}
            >
              {"Integrations"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button___1Q3)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__emz9D
              )}
            >
              {"Insights"}
            </div>
          </Button>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__t8Lw)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___3XCac
            )}
          >
            {"Support"}
          </div>
          <Button
            className={classNames("__wab_instance", sty.button__uSXs)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            {"Documentation"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__mSvl0)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            {"FAQs"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__geZed)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            {"Status"}
          </Button>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___1RE7)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___5F0W3
            )}
          >
            {"Company"}
          </div>
          <Button
            className={classNames("__wab_instance", sty.button__wySte)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            {"About"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button___5X5Sl)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            {"Contact us"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__lfAqR)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            {"Careers"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__rMkwV)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            {"Media"}
          </Button>
        </Stack__>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "logo"],
  logo: ["logo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooterSection__ArgProps,
          internalVariantPropNames: PlasmicFooterSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooterSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterSection";
  } else {
    func.displayName = `PlasmicFooterSection.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterSection = Object.assign(
  // Top-level PlasmicFooterSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    // Metadata about props expected for PlasmicFooterSection
    internalVariantProps: PlasmicFooterSection__VariantProps,
    internalArgProps: PlasmicFooterSection__ArgProps
  }
);

export default PlasmicFooterSection;
/* prettier-ignore-end */
